pipeline {
    agent any
    
    tools {
        nodejs 'NodeJS-20' // Configure this in Jenkins Global Tool Configuration
        maven 'Maven-3.9' // Configure this in Jenkins Global Tool Configuration
    }
    
    environment {
        // Environment variables
        NODE_ENV = 'production'
        BACKEND_PORT = '3001'
        FRONTEND_PORT = '4173'
        SPRING_PORT = '8080'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            parallel {
                stage('Frontend Dependencies') {
                    steps {
                        echo 'Installing frontend dependencies...'
                        dir('social-spark-47-main') {
                            bat 'npm install'
                        }
                    }
                }
                stage('Backend Dependencies') {
                    steps {
                        echo 'Installing backend dependencies...'
                        dir('backend-project') {
                            bat 'npm install'
                        }
                    }
                }
            }
        }
        
        stage('Build Applications') {
            parallel {
                stage('Build Frontend') {
                    steps {
                        echo 'Building React frontend...'
                        dir('social-spark-47-main') {
                            bat 'npm run build'
                        }
                    }
                    post {
                        success {
                            echo 'Frontend build completed successfully!'
                        }
                        failure {
                            echo 'Frontend build failed!'
                        }
                    }
                }
                stage('Build Spring Boot Demo') {
                    steps {
                        echo 'Building Spring Boot application...'
                        dir('demo') {
                            bat 'mvn clean compile'
                        }
                    }
                    post {
                        success {
                            echo 'Spring Boot build completed successfully!'
                        }
                        failure {
                            echo 'Spring Boot build failed!'
                        }
                    }
                }
            }
        }
        
        stage('Test Applications') {
            parallel {
                stage('Test Frontend') {
                    steps {
                        echo 'Testing React frontend...'
                        dir('social-spark-47-main') {
                            script {
                                try {
                                    bat 'npm test -- --watchAll=false'
                                } catch (Exception e) {
                                    echo 'Frontend tests not configured or failed: ' + e.getMessage()
                                }
                            }
                        }
                    }
                }
                stage('Test Backend') {
                    steps {
                        echo 'Testing Node.js backend...'
                        dir('backend-project') {
                            script {
                                try {
                                    bat 'npm test'
                                } catch (Exception e) {
                                    echo 'Backend tests not configured or failed: ' + e.getMessage()
                                }
                            }
                        }
                    }
                }
                stage('Test Spring Boot') {
                    steps {
                        echo 'Testing Spring Boot application...'
                        dir('demo') {
                            script {
                                try {
                                    bat 'mvn test'
                                } catch (Exception e) {
                                    echo 'Spring Boot tests failed: ' + e.getMessage()
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Package Applications') {
            parallel {
                stage('Package Spring Boot') {
                    steps {
                        echo 'Packaging Spring Boot application...'
                        dir('demo') {
                            bat 'mvn clean package -DskipTests'
                        }
                    }
                    post {
                        success {
                            archiveArtifacts artifacts: 'demo/target/*.jar', fingerprint: true
                        }
                    }
                }
                stage('Archive Frontend Build') {
                    steps {
                        echo 'Archiving frontend build...'
                        dir('social-spark-47-main') {
                            script {
                                if (fileExists('dist')) {
                                    archiveArtifacts artifacts: 'dist/**/*', fingerprint: true
                                } else {
                                    echo 'Frontend dist folder not found'
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Quality Checks') {
            steps {
                echo 'Running quality checks...'
                script {
                    // Add SonarQube or other quality gates here if needed
                    echo 'Quality checks placeholder - configure SonarQube if needed'
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'main'
            }
            steps {
                echo 'Deploying to staging environment...'
                script {
                    // Add deployment scripts here
                    echo 'Deployment placeholder - configure your deployment target'
                    echo 'Options: Docker containers, VM deployment, cloud deployment'
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed!'
            // Clean workspace if needed
            cleanWs()
        }
        success {
            echo 'Build successful! üéâ'
            // Send success notifications
        }
        failure {
            echo 'Build failed! ‚ùå'
            // Send failure notifications
        }
        unstable {
            echo 'Build unstable! ‚ö†Ô∏è'
        }
    }
}
